package poker;

import java.util.ArrayList;

public class HandOfPoker {

	private ArrayList<PokerPlayer> pokerPlayers = new ArrayList<PokerPlayer>();
	protected int pot = 0; // Amount of chips stored in the pot

	public HandOfPoker(ArrayList<PokerPlayer> players) {
		pokerPlayers = players;
		System.out.println("New Deal:\n");
	}

	public void printChips() {
		for (int i = 0; i < pokerPlayers.size(); i++) {
			System.out.println("> " + pokerPlayers.get(i).name + " has " + pokerPlayers.get(i).chips + " chip(s)");
		}
	}

	public void roundOfBetting() {
		HumanPokerPlayer human = (HumanPokerPlayer)pokerPlayers.get(0);

		// Deals with Human Player
		System.out.println("How much would you like to bet? (< " + human.chips + ")");
		try {
			int chipsBet = Integer.parseInt(human.prompt());

			if (chipsBet > human.chips) { // Cannot bet more than chips held by player
				System.out.println("You only have " + human.chips + " chip(s)");
				roundOfBetting(); // restart betting 
			}
			else {
				human.bet(chipsBet); // take chips away from player
				System.out.println("> You have bet " + chipsBet + " chip(s)");
				pot += chipsBet; // add chips bet to pot
			}
		}
		catch (NumberFormatException e){ // String entered is not a valid integer
			System.out.println("Bet must be a number!");
			roundOfBetting(); // restart betting
		}

		// Deals with Automated Players
		for (int i = 1; i < pokerPlayers.size(); i++) {
			AutomatedPokerPlayer bot = (AutomatedPokerPlayer)pokerPlayers.get(i);

			int chipsBet = bot.getChipsToBet(); // gets chips bet by bot
			pokerPlayers.get(i).bet(chipsBet);
			System.out.println("> " + bot.name + " has bet "  + chipsBet + " chip(s)");
			pot += chipsBet; // add chips to pot
		}
	}

	public void discardCards() {
		HumanPokerPlayer human = (HumanPokerPlayer)pokerPlayers.get(0);

		// Deals with Human Player
		System.out.println("What cards would you like to discard? (e.g 0 2 3)");
		String input = human.prompt();
		String [] cards = input.split(" ");
		int [] discard = new int[cards.length];
		boolean correctInput = false;

		while (!correctInput) {
			for (int i = 0; i < cards.length; i++) {
				try {
					
					// Checks if player exceeded max three cards
					if (discard.length > 3) {
						System.out.println("Maximum cards you can discard is three");
						correctInput = false;
						//discardCards(); // repeat method
					}
					else {
						// Assigns and parses discarded cards to integers
						discard[i] = Integer.parseInt(cards[i]);
						correctInput = true;
					}
				}
				catch (NumberFormatException e) {
					System.out.println("Invalid input (must be integers)");
					correctInput = false;
					//discardCards();
				}
			}	
		}
		
		System.out.println(discard.length + "\n\n");
		for (int i1 = 0; i1 < discard.length; i1++) {
			System.out.println(discard[i1]);
		}

		
		// Deals with Automated Player
		for (int i = 1; i < pokerPlayers.size(); i++) {
			AutomatedPokerPlayer bot = (AutomatedPokerPlayer)pokerPlayers.get(i);

		}
	}

	// Removes any players that want to fold
	public void checkFold() {
		HumanPokerPlayer human = (HumanPokerPlayer)pokerPlayers.get(0);

		// Deals with Human PLayer
		System.out.println("\nWould you like to bet? (y/n to fold) ");
		String input = human.prompt();

		if (input.equals("y")) {
			roundOfBetting(); // Start betting
		}
		else if (input.equals("n")) {
			System.out.println("You have folded\n");
			pokerPlayers.remove(0); // Remove human player from the hand
		}
		else {
			System.out.println("Wrong input");
			checkFold(); // restart checkFold()
		}

		// Deals with Automated Players
		for (int i = 1; i < pokerPlayers.size(); i++) {
			AutomatedPokerPlayer bot = (AutomatedPokerPlayer)pokerPlayers.get(i);
			// If bot.fold() returns true remove from hand
			if (bot.fold()) {
				System.out.println("> " + bot.name + " has folded");
				pokerPlayers.remove(i);
			}
		}
	}

	public void printHumanHand() {
		HandOfCards hand = pokerPlayers.get(0).playerHand;

		for (int i = 0; i < HandOfCards.HAND_SIZE; i++) {
			switch(hand.getCard(i).getGameValue()) {
			case 14:
				System.out.print(i + ". Ace of ");
				break;
			case 2:
				System.out.print(i + ". Two of ");
				break;
			case 3:
				System.out.print(i + ". Three of ");
				break;
			case 4:
				System.out.print(i + ". Four of ");
				break;
			case 5:
				System.out.print(i + ". Five of ");
				break;
			case 6:
				System.out.print(i + ". Six of ");
				break;
			case 7:
				System.out.print(i + ". Seven of ");
				break;
			case 8:
				System.out.print(i + ". Eight of ");
				break;
			case 9:
				System.out.print(i + ". Nine of ");
				break;
			case 10:
				System.out.print(i + ". Ten of ");
				break;
			case 11:
				System.out.print(i + ". Jack of ");
				break;
			case 12:
				System.out.print(i + ". Queen of ");
				break;
			case 13:
				System.out.print(i + ". King of ");
				break;
			}

			for (int j = 0; j < 4; j++) {
				if (hand.getCard(i).getSuit() == 'H') {
					System.out.println("Hearts");
					break;
				}
				else if (hand.getCard(i).getSuit() == 'S') {
					System.out.println("Spades");
					break;
				}
				else if (hand.getCard(i).getSuit() == 'D') {
					System.out.println("Diamonds");
					break;
				}
				else if (hand.getCard(i).getSuit() == 'C') {
					System.out.println("Clubs");
					break;
				}
			}
		}
	}
}
