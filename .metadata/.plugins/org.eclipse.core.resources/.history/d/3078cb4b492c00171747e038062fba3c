package poker;

import java.util.ArrayList;

public class HandOfPoker {

	protected int currentCall = 0;
	int chipsRaised = 0;
	int lastToRaise = 0;
	private ArrayList<PokerPlayer> pokerPlayers = new ArrayList<PokerPlayer>();
	private DeckOfCards handDeck;
	protected int pot = 0; // Amount of chips stored in the pot

	public HandOfPoker(ArrayList<PokerPlayer> players, DeckOfCards deck) {
		pokerPlayers = players;
		handDeck = deck;
		//attempt to deal
		//		for(PokerPlayer p : pokerPlayers){
		//			p.playerHand = new HandOfCards(deck);
		//		}
		System.out.println("New Deal:\n");
	}

	public int noOfPlayers() {
		int noOfPlayers = 0;
		for (int i = 0; i < pokerPlayers.size(); i++) {
			if (pokerPlayers.get(i).inHand) {
				noOfPlayers++;
			}
		}
		return noOfPlayers;
	}

	public String printChips(String username) {
		String chips="";
		for (int i = 0; i < pokerPlayers.size(); i++) {
			chips+="\n" + pokerPlayers.get(i).name + " has " + pokerPlayers.get(i).getChips() + " chip(s)";
		}
		return chips;
	}


	public String checkIfHumanFold(String content){
		currentCall = 0;
		String output = "";
		PokerPlayer human = pokerPlayers.get(0);
		if (human.inHand){
			if(!(content.equalsIgnoreCase("y") || content.equalsIgnoreCase("yes") || content.equalsIgnoreCase("n") || content.equalsIgnoreCase("no"))) {
				//System.out.println("Wrong input. Please tweet 'yes' or 'no'");
				output = "@" + human.name + " \nWrong input. Please tweet 'yes' or 'no'";
			} else if(!human.fold(currentCall, content)){
				output = "How much would you like to raise by? (< " + human.chips + ")";
			} else{
				output = "@"+human.name+" has folded";
				output += firstAutomatedCallorRaise();
				//output += secondAutomatedCall();
			}
		}
		return output;
	}

	public String humanRaiseAndAutomatedCall(int raise){
		String output = "\nhumanRaiseAndAutomatedCall OUTPUT";
		PokerPlayer human = pokerPlayers.get(0);

		int chipsRaised = raise;
		human.lastBet = currentCall + chipsRaised; //Updates players last bet to be the call plus what they raise
		currentCall = human.lastBet;			   //Update currentCall to equal the last players bet
		pot += human.lastBet;

		System.out.println("POT: "+pot);
		output = firstAutomatedCallorRaise();
		System.out.println("OUTPUT: "+output);

		if(lastToRaise == 0){
			return output;
		}else{
			output += "Would you like to fold?(Call="+(currentCall- human.lastBet)+")";
		}
		return output;
	}

	public String firstAutomatedCallorRaise(){
		lastToRaise = 0;
		String output = "";
		for(int i=1;i<pokerPlayers.size();i++){
			AutomatedPokerPlayer player = (AutomatedPokerPlayer) pokerPlayers.get(i);
			if(player.inHand){

				if(!player.fold(currentCall)){

					chipsRaised = player.getChipsToRaise();
					player.lastBet = currentCall + chipsRaised; // Updates players last bet to be call plus their raise
					currentCall = player.lastBet; //Update current call to equal last players bet
					pot += player.lastBet; //Update pot


					if (chipsRaised > 0) { // Check for last raise
						if(chipsRaised == player.getChips() +chipsRaised){
							System.out.println(player.name + " goes all in! " + chipsRaised + " chip(s)");
							output += player.name + " goes all in! " + chipsRaised + " chip(s)\n";
						}
						else{
							System.out.println(player.name + " raises by " + chipsRaised + " chip(s)");
							output += player.name + " raises by " + chipsRaised + " chip(s)\n";
						}
						lastToRaise = i;
					}
					else {
						if(currentCall == currentCall + player.getChips()){
							System.out.println(player.name + " goes all in! " + currentCall + " chip(s)");
							output += player.name + " goes all in! " + currentCall + " chip(s)\n";
						}
						else{
							System.out.println(player.name + " called with " + currentCall + " chip(s)");
							output += player.name + " called with " + currentCall + " chip(s)\n";
						}
					}
				}
				else{
					System.out.println(player.name + " has folded");
					output+= player.name + " has folded\n";
					pokerPlayers.get(i).inHand = false;
				}
			}
			System.out.println("POT = "+pot);
			System.out.println("LAST TO RAISE = "+ lastToRaise);
		}
		return output;

	}

	// HUMAN:
	public String humanMatch(String content){
		String output = "";
		PokerPlayer human = pokerPlayers.get(0);

		if(human.inHand){
			int costToCall = currentCall - human.lastBet;
			if(!(content.equalsIgnoreCase("y") || content.equalsIgnoreCase("yes") || content.equalsIgnoreCase("n") || content.equalsIgnoreCase("no"))) {
				//System.out.println("Wrong input. Please tweet 'yes' or 'no'");
				output = "@" + human.name + " \nWrong input. Please tweet 'yes' or 'no'";
			}
			else if (!human.fold(costToCall, content)){
				pot += costToCall; // Updates pot
				System.out.println(human.name + " matches with " + costToCall + " chip(s)\n");
				output+= human.name + " matches with " + costToCall + " chip(s)\n";
				System.out.println("POT = " + pot);
			}
		}

		return output;
	}

	// AUTOMATED:
	public String automatedMatch(){
		String output = "";
		for (int j = 1; j < lastToRaise; j++) {
			AutomatedPokerPlayer player = (AutomatedPokerPlayer) pokerPlayers.get(j);
			int costToCall = currentCall - player.lastBet; // Calculates cost of player taking original bet into account

			if (player.inHand) {				
				if (!player.fold(costToCall)) { // Gives option to fold
					//player.bet(costToCall); // Updates players chips
					pot += costToCall; // Updates pot
					System.out.println("> " + player.name + " matches with " + costToCall + " chip(s)");
					output+="" + player.name + " matches with " + costToCall + " chip(s)\n";
					System.out.println("POT = " + pot);
				}
				else{
					System.out.println("> " + player.name + " has folded");
					output+= player.name + " has folded";
					pokerPlayers.get(j).inHand = false;
				}
			}
		}

		return output;
	}

	// HUMAN:
	public String discardHumanCards(String content){
		String output = "";
		PokerPlayer human = pokerPlayers.get(0);

		if(human.inHand){
			//System.out.println("In the discard level");
			boolean correctInput = true;
			boolean inRange = false;
			String input = "";
			String [] cards = content.split(" ");
			int [] discard = new int[cards.length];
			
			if (discard.length > 3) {
				System.out.println("Maximum cards you can discard is three");
				output = "@" + human.name + " \nWrong input. Maximum cards you can discard is 3";
				return output;
			}
			
			else {
				try {
					// Assigns and parses discarded cards to integers
					for (int i = 0; i < cards.length; i++) {
						discard[i] = Integer.parseInt(cards[i]);
						if (discard[i] < 0 || discard[i] > 4) {
							inRange = false;
							break;
						}
					}	

					if (inRange) {
						correctInput = true;
						player.hand.discardCards(discard, discard.length);
					}
					else {
						System.out.println("Index entered is out of range, must be between 0-4");
						output = "@" + human.name + " \nWrong input. Index entered is out of range, must be between 0-4";
						return output;
						//correctInput = false;
					}
				}
				catch (NumberFormatException e) {
					System.out.println("Invalid input (must be integers)");
					output = "@" + human.name + " \nWrong input. Invalid input (must be integers)";
					return output;
				}
			}

			//				if(!(content.equalsIgnoreCase("y") || content.equalsIgnoreCase("yes") || content.equalsIgnoreCase("n") || content.equalsIgnoreCase("no"))) {
			//					//System.out.println("Wrong input. Please tweet 'yes' or 'no'");
			//					output = "@" + human.name + " \nWrong input. Please tweet 'yes' or 'no'";
			//				}
			//				else if (!human.fold(costToCall, content)){
			//					pot += costToCall; // Updates pot
			//					System.out.println(human.name + " matches with " + costToCall + " chip(s)\n");
			//					output+= human.name + " matches with " + costToCall + " chip(s)\n";
			//					System.out.println("POT = " + pot);
			//				}
		}

		//return output;
	}


	public String roundOfBetting(String content) {
		int lastToRaise = 0; // index of player that raised last
		String output = "";
		System.out.println("CONTENT: "+content);

		//	String[] tweets = new String[2];

		//
		//		//reset players last bets
		//		for(PokerPlayer player : pokerPlayers){
		//			player.resetBet();
		//		}
		//
		//		for (int i = 0; i < pokerPlayers.size(); i++) {
		//			PokerPlayer player = pokerPlayers.get(i);
		//			if (player.inHand) {
		//
		//				if (!player.fold(currentCall, content)) { // Gives option to fold
		//
		//					int chipsRaised = player.getChipsToRaise(output);
		//					player.lastBet = currentCall + chipsRaised; // Updates players last bet to be call plus their raise
		//					currentCall = player.lastBet; //Update current call to equal last players bet
		//					pot += player.lastBet; //Update pot
		//					if (chipsRaised > 0) { // Check for last raise
		//						if(chipsRaised == player.getChips() +chipsRaised){
		//							lastToRaise = i;
		//							output += "> " + player.name + " goes all in! " + chipsRaised + " chip(s)";
		//						}
		//						else{
		//							output += "> " + player.name + " raises by " + chipsRaised + " chip(s)";
		//						}
		//						lastToRaise = i;
		//					}
		//					else {
		//						if(currentCall == currentCall + player.getChips()){
		//							output += "> " + player.name + " goes all in! " + currentCall + " chip(s)";
		//						}
		//						else{
		//							output += "> " + player.name + " called with " + currentCall + " chip(s)";
		//						}
		//					}
		//					//System.out.println("POT = " + pot);
		//				}
		//				else if(content.contains("Wrong input. Please tweet 'yes' or 'no'")){
		//					output+=content;
		//				}
		//				else {
		//					pokerPlayers.get(i).inHand = false;
		//					output += "> " + player.name + " folds";				
		//				}
		//			}
		//		}
		//		System.out.println("FIRST OUTPUT: "+ output);
		//		//tweets[0] = output;
		//		output = "";
		//
		//		if(content.contains("Wrong input. Please tweet 'yes' or 'no'")){
		//
		//			for (int j = 0; j < lastToRaise; j++) {
		//				PokerPlayer player = pokerPlayers.get(j);
		//				int costToCall = currentCall - player.lastBet; // Calculates cost of player taking original bet into account
		//
		//				if (player.inHand) {				
		//					if (!player.fold(costToCall, content)) { // Gives option to fold
		//						//player.bet(costToCall); // Updates players chips
		//						pot += costToCall; // Updates pot
		//						System.out.println("> " + player.name + " matches with " + costToCall + " chip(s)");
		//						output+="> " + player.name + " matches with " + costToCall + " chip(s)";
		//						System.out.println("POT = " + pot);
		//					}
		//					else{
		//						System.out.println("> " + player.name + " has folded");
		//						output+="> " + player.name + " has folded";
		//						pokerPlayers.get(j).inHand = false;
		//					}
		//				}
		//			}
		//		}
		//		output+="POT = " + pot;
		//		System.out.println("SECOND OUTPUT: "+output);
		//		//tweets[1] = output;
		//
		//		
		//		System.out.println("Tweet Length = ");
		return output;
	}

	public void returnHands() {
		// Loop to return all cards from each player
		for (int i = 0; i < pokerPlayers.size(); i++) {
			PokerPlayer player = pokerPlayers.get(i);
			if(player.inHand){
				player.returnCards(handDeck);
			}
		}
	}

	public void discardCards() {

		// Loop to get the discard from each player
		for (int i = 0; i < pokerPlayers.size(); i++) {
			PokerPlayer player = pokerPlayers.get(i);
			if(player.inHand){
				//player.discard();
			}
		}
	}

	// Removes any players that want to fold

	public String printHumanHand() {
		String handStr = "";

		for(PokerPlayer player : pokerPlayers){
			//if human player is still in hand code will execute
			if(player.getClass().getName().equals("poker.PokerPlayer") && player.inHand){
				HandOfCards hand = player.playerHand;
				System.out.println("\nYour Current Hand: -> " + hand.getHandType());
				handStr = hand.toString();
			}
		}
		return handStr;
	}

	public void showCards() {
		for(int z = 0; z < pokerPlayers.size(); z++){
			PokerPlayer player = pokerPlayers.get(z);

			if (player.inHand) {
				System.out.println("\n\n" + pokerPlayers.get(z).name + " Hand = " + player.playerHand.getHandType());
				System.out.println("SCORE = " + player.playerHand.getGameValue());
				for (int i = 0; i < HandOfCards.HAND_SIZE; i++) {
					switch(player.playerHand.getCard(i).getGameValue()) {
					case 14:
						System.out.print(i + ". Ace of ");
						break;
					case 2:
						System.out.print(i + ". Two of ");
						break;
					case 3:
						System.out.print(i + ". Three of ");
						break;
					case 4:
						System.out.print(i + ". Four of ");
						break;
					case 5:
						System.out.print(i + ". Five of ");
						break;
					case 6:
						System.out.print(i + ". Six of ");
						break;
					case 7:
						System.out.print(i + ". Seven of ");
						break;
					case 8:
						System.out.print(i + ". Eight of ");
						break;
					case 9:
						System.out.print(i + ". Nine of ");
						break;
					case 10:
						System.out.print(i + ". Ten of ");
						break;
					case 11:
						System.out.print(i + ". Jack of ");
						break;
					case 12:
						System.out.print(i + ". Queen of ");
						break;
					case 13:
						System.out.print(i + ". King of ");
						break;
					}

					for (int j = 0; j < 4; j++) {
						if (player.playerHand.getCard(i).getSuit() == 'H') {
							System.out.println("Hearts");
							break;
						}
						else if (player.playerHand.getCard(i).getSuit() == 'S') {
							System.out.println("Spades");
							break;
						}
						else if (player.playerHand.getCard(i).getSuit() == 'D') {
							System.out.println("Diamonds");
							break;
						}
						else if (player.playerHand.getCard(i).getSuit() == 'C') {
							System.out.println("Clubs");
							break;
						}
					}
				}
			}

		}
	}

	public void decideWinner() {
		int winningHandScore = 0;
		int winningPlayer = 0;

		for(int z = 0; z < pokerPlayers.size();z++){
			PokerPlayer player = pokerPlayers.get(z);
			if(player.playerHand.getGameValue() > winningHandScore && player.inHand){
				winningHandScore = player.playerHand.getGameValue();
				winningPlayer = z;
			}
		}

		System.out.println("\n\n" + pokerPlayers.get(winningPlayer).name + " wins the pot: " + pot + " chips");
		pokerPlayers.get(winningPlayer).chipsWon(pot);


	}
}
