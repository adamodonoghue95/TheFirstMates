package poker;

import java.util.ArrayList;

public class HandOfPoker {

	protected int lastBet = 0;
	private ArrayList<PokerPlayer> pokerPlayers = new ArrayList<PokerPlayer>();
	protected int pot = 0; // Amount of chips stored in the pot

	public HandOfPoker(ArrayList<PokerPlayer> players) {
		pokerPlayers = players;
		System.out.println("New Deal:\n");
	}

	public void printChips() {
		for (int i = 0; i < pokerPlayers.size(); i++) {
			System.out.println("> " + pokerPlayers.get(i).name + " has " + pokerPlayers.get(i).getChips() + " chip(s)");
		}
	}
	
	public void roundOfBetting() {
		lastBet = 0;
		int lastToRaise = 0; // index of player that raised last
		int noOfFolds = 0; // Tracks number of folds
		ArrayList<Integer> currentBets = new ArrayList<Integer>();
				
		for (int i = 0; i < pokerPlayers.size(); i++) {
			PokerPlayer player = pokerPlayers.get(i);
			
			if (i == 0) { // Prints only for human player
				System.out.println("\nWould you like to fold? (The cost to call is " + lastBet +" chips)");
			}

			if (player.inHand) {
				if (!player.fold(lastBet)) { // Gives option to fold

					int chipsRaised = player.getChipsToRaise(); // gets chips raised by player
					int bet = lastBet + chipsRaised;
					
					pot += bet; // Player calls lastBet
					
					currentBets.add(bet); // Adds bet to list of bets
					
					if (chipsRaised > 0) { // Check for last raise
						System.out.println("> " + player.name + " raises " + chipsRaised + " chip(s)");
						lastToRaise = i;
					}
					else {
						System.out.println("> " + player.name + " matches " + lastBet + " chip(s)");
					}
					
					lastBet = bet; // Update lastBet from current bet
					player.bet(bet); // Update players chips
				}
				else {
					System.out.println("> " + player.name + " folds");
					noOfFolds++; // Counts number of people folding
					pokerPlayers.get(i).inHand = false;
				}
			}
		}
		System.out.println((lastToRaise-noOfFolds)+ " = " + lastToRaise + " - " + noOfFolds);
		lastToRaise -= noOfFolds; // Makes sure next loop won't go out of bounds
		System.out.println("lastToRaise = " + lastToRaise);
		// Loop to match any raises
		for (int j = 0; j < lastToRaise; j++) {
			PokerPlayer player = pokerPlayers.get(j);
			for (int i = 0; i < currentBets.size(); i++) {
				System.out.println(i +" bet: " + currentBets.get(i));
			}
			int leftToBet = lastBet - currentBets.get(j); // What is left to match the last raise
			
			if (j == 0) { // Prints only for human player
				System.out.println("\nWould you like to fold? (The cost to call is " + leftToBet +" chips)");
			}

			if (player.inHand) {				
				if (!player.fold(lastBet)) { // Gives option to fold
					player.bet(leftToBet); // Updates players chips
					pot += leftToBet; // Updates pot
					System.out.println("> " + player.name + " matches to " + lastBet + " chip(s)");
				}
				else{
					System.out.println("> " + player.name + " has folded");
					pokerPlayers.get(j).inHand = false;
					lastToRaise--;
				}
			}
		}
				
	}

	public void discardCards() {

		// Deals with Automated Player
		for (int i = 0; i < pokerPlayers.size(); i++) {
			PokerPlayer player = pokerPlayers.get(i);
			player.discard();
		}
	}

	// Removes any players that want to fold

	public void printHumanHand() {
		HandOfCards hand = pokerPlayers.get(0).playerHand;

		for (int i = 0; i < HandOfCards.HAND_SIZE; i++) {
			switch(hand.getCard(i).getGameValue()) {
			case 14:
				System.out.print(i + ". Ace of ");
				break;
			case 2:
				System.out.print(i + ". Two of ");
				break;
			case 3:
				System.out.print(i + ". Three of ");
				break;
			case 4:
				System.out.print(i + ". Four of ");
				break;
			case 5:
				System.out.print(i + ". Five of ");
				break;
			case 6:
				System.out.print(i + ". Six of ");
				break;
			case 7:
				System.out.print(i + ". Seven of ");
				break;
			case 8:
				System.out.print(i + ". Eight of ");
				break;
			case 9:
				System.out.print(i + ". Nine of ");
				break;
			case 10:
				System.out.print(i + ". Ten of ");
				break;
			case 11:
				System.out.print(i + ". Jack of ");
				break;
			case 12:
				System.out.print(i + ". Queen of ");
				break;
			case 13:
				System.out.print(i + ". King of ");
				break;
			}

			for (int j = 0; j < 4; j++) {
				if (hand.getCard(i).getSuit() == 'H') {
					System.out.println("Hearts");
					break;
				}
				else if (hand.getCard(i).getSuit() == 'S') {
					System.out.println("Spades");
					break;
				}
				else if (hand.getCard(i).getSuit() == 'D') {
					System.out.println("Diamonds");
					break;
				}
				else if (hand.getCard(i).getSuit() == 'C') {
					System.out.println("Clubs");
					break;
				}
			}
		}
	}

	public void showCards() {
		for(int z = 0; z < pokerPlayers.size(); z++){
			PokerPlayer player = pokerPlayers.get(z);
			
			if (player.inHand) {
				System.out.println("\n\n" + pokerPlayers.get(z).name + " Hand = " + player.playerHand.getHandType());
				System.out.println("SCORE = " + player.playerHand.getGameValue());
				for (int i = 0; i < HandOfCards.HAND_SIZE; i++) {
					switch(player.playerHand.getCard(i).getGameValue()) {
					case 14:
						System.out.print(i + ". Ace of ");
						break;
					case 2:
						System.out.print(i + ". Two of ");
						break;
					case 3:
						System.out.print(i + ". Three of ");
						break;
					case 4:
						System.out.print(i + ". Four of ");
						break;
					case 5:
						System.out.print(i + ". Five of ");
						break;
					case 6:
						System.out.print(i + ". Six of ");
						break;
					case 7:
						System.out.print(i + ". Seven of ");
						break;
					case 8:
						System.out.print(i + ". Eight of ");
						break;
					case 9:
						System.out.print(i + ". Nine of ");
						break;
					case 10:
						System.out.print(i + ". Ten of ");
						break;
					case 11:
						System.out.print(i + ". Jack of ");
						break;
					case 12:
						System.out.print(i + ". Queen of ");
						break;
					case 13:
						System.out.print(i + ". King of ");
						break;
					}

					for (int j = 0; j < 4; j++) {
						if (player.playerHand.getCard(i).getSuit() == 'H') {
							System.out.println("Hearts");
							break;
						}
						else if (player.playerHand.getCard(i).getSuit() == 'S') {
							System.out.println("Spades");
							break;
						}
						else if (player.playerHand.getCard(i).getSuit() == 'D') {
							System.out.println("Diamonds");
							break;
						}
						else if (player.playerHand.getCard(i).getSuit() == 'C') {
							System.out.println("Clubs");
							break;
						}
					}
				}
			}
			
		}
	}

	public void decideWinner() {
		int winningHandScore = 0;
		int winningPlayer = 0;
		
		for(int z = 0; z < pokerPlayers.size();z++){
			PokerPlayer player = pokerPlayers.get(z);
			if(player.playerHand.getGameValue() > winningHandScore && player.inHand){
				winningHandScore = player.playerHand.getGameValue();
				winningPlayer = z;
			}
		}

		System.out.println("\n\n" + pokerPlayers.get(winningPlayer).name + " wins the pot: " + pot + " chips");
		pokerPlayers.get(winningPlayer).chipsWon(pot);


	}
}
