package poker;

import java.util.Random;

public class AutomatedPokerPlayer extends PokerPlayer{

	public AutomatedPokerPlayer(DeckOfCards deck, String botName) {
		super(deck, botName);
	}

	// returns amount of chips to bet according to hand held
	public int getChipsToRaise() {
		// TODO
		Random rand = new Random();
		int num = rand.nextInt(2);
		if (getChips() > 2 && num == 0) {
			this.chips -= 2;
			return 2;
		}
		else {
			return 0;
		}
	}

	// returns whether Bot folds or not
	public boolean fold(int costToCall) {
		Random rand = new Random();
		int num = rand.nextInt(4);
		// TODO
		if (num == 0) {
			return true;
		}
		else {
			if(costToCall > this.chips) {
				this.chips = 0;
			}
			else {
				this.chips -= costToCall;
			}
			return false;
		}	
	}

	public String match(int lastToRaise, int currentCall){
		String output = "";
		int costToCall = currentCall - lastBet; // Calculates cost of player taking original bet into account

		if (inHand) {				
			if (!fold(costToCall)) { // Gives option to fold
				System.out.println("> " + name + " matches with " + costToCall + " chip(s)");
				output+="" + name + " matches with " + costToCall + " chip(s)";
			}
			else{
				System.out.println("> " + name + " has folded");
				output+= name + " has folded";
				inHand = false;
			}
		}

		return output;
	}


	//this is a new method for discarding the cards
	public void discard(){
		Random rand = new Random();
		int noDiscardCards = 0;				//variable to store how many cards need to be discarded
		int [] discardCards = new int [3];	//array for storing the positions of the discarded cards

		//Loop which runs the random generator against the discard probability for each card and decides which ones to discard
		//I don't need to check that no more than 3 cards will be discarded because my getDiscardProbability() ensures that does not happen.
		for(int i = 0; i < HandOfCards.HAND_SIZE; i++){
			int randomNumber = rand.nextInt(99) + 1;
			
			if(randomNumber < playerHand.getDiscardProbability(i)) { // Determines whether the car is discarded or not
				discardCards[noDiscardCards] = i;
				noDiscardCards++;
			}
		}
		//discard the cards using the HandOfCards method which takes in the array of discarded card indexes
		System.out.println(this.name + " discards " + noDiscardCards + " cards");
		playerHand.discardCards(discardCards, noDiscardCards);
		//return noDiscardCards;
	}

}
