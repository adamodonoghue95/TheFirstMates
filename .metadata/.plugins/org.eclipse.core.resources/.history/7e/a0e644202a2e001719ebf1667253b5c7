package poker;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import twitter4j.FilterQuery;
import twitter4j.TwitterStream;
import twitter4j.TwitterStreamFactory;
import twitter4j.conf.ConfigurationBuilder;

public class Run {
	
	public static void main(String[] args){
		final int NUM_THREADS = 5;
		TwitterBot tbot = new TwitterBot();
		ConfigurationBuilder builder1;
		builder1 = new ConfigurationBuilder();
		builder1.setOAuthConsumerKey(tbot.CONSUMER_KEY);
		builder1.setOAuthConsumerSecret(tbot.CONSUMER_SECRET);
		builder1.setOAuthAccessToken(tbot.ACCESS_TOKEN);
		builder1.setOAuthAccessTokenSecret(tbot.ACCESS_TOKEN_SECRET);
		
		TwitterStream twitterStream = new TwitterStreamFactory(builder1.build()).getInstance();
		
		FilterQuery fq = new FilterQuery();
	    
        String keywords[] = {tbot.HASHTAG, tbot.BOT_ID};

        fq.track(keywords);
        
        SL sl = new SL();
        
        final ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);
        Runnable tweetAnalyzer = defineMonitoringRunnable(tweetRepository);
        for (int i = 0; i < NUM_THREADS; i++) {
            executor.execute(tweetAnalyzer);
            try {
                Thread.sleep(10);
            } 
            catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        
        twitterStream.addListener(sl);
        twitterStream.filter(fq);  
	}

}
